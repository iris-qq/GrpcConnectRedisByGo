// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cr.proto

package cr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UseridRequest struct {
	UserIdList           []string `protobuf:"bytes,1,rep,name=UserIdList,proto3" json:"UserIdList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UseridRequest) Reset()         { *m = UseridRequest{} }
func (m *UseridRequest) String() string { return proto.CompactTextString(m) }
func (*UseridRequest) ProtoMessage()    {}
func (*UseridRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cr_e35530168307cab2, []int{0}
}
func (m *UseridRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UseridRequest.Unmarshal(m, b)
}
func (m *UseridRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UseridRequest.Marshal(b, m, deterministic)
}
func (dst *UseridRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UseridRequest.Merge(dst, src)
}
func (m *UseridRequest) XXX_Size() int {
	return xxx_messageInfo_UseridRequest.Size(m)
}
func (m *UseridRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UseridRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UseridRequest proto.InternalMessageInfo

func (m *UseridRequest) GetUserIdList() []string {
	if m != nil {
		return m.UserIdList
	}
	return nil
}

type FriendListReply struct {
	FriendsList          string   `protobuf:"bytes,1,opt,name=FriendsList,proto3" json:"FriendsList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendListReply) Reset()         { *m = FriendListReply{} }
func (m *FriendListReply) String() string { return proto.CompactTextString(m) }
func (*FriendListReply) ProtoMessage()    {}
func (*FriendListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cr_e35530168307cab2, []int{1}
}
func (m *FriendListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendListReply.Unmarshal(m, b)
}
func (m *FriendListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendListReply.Marshal(b, m, deterministic)
}
func (dst *FriendListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendListReply.Merge(dst, src)
}
func (m *FriendListReply) XXX_Size() int {
	return xxx_messageInfo_FriendListReply.Size(m)
}
func (m *FriendListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendListReply.DiscardUnknown(m)
}

var xxx_messageInfo_FriendListReply proto.InternalMessageInfo

func (m *FriendListReply) GetFriendsList() string {
	if m != nil {
		return m.FriendsList
	}
	return ""
}

func init() {
	proto.RegisterType((*UseridRequest)(nil), "UseridRequest")
	proto.RegisterType((*FriendListReply)(nil), "FriendListReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchClient interface {
	SearchFromRedis(ctx context.Context, in *UseridRequest, opts ...grpc.CallOption) (*FriendListReply, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) SearchFromRedis(ctx context.Context, in *UseridRequest, opts ...grpc.CallOption) (*FriendListReply, error) {
	out := new(FriendListReply)
	err := c.cc.Invoke(ctx, "/Search/SearchFromRedis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServer is the server API for Search service.
type SearchServer interface {
	SearchFromRedis(context.Context, *UseridRequest) (*FriendListReply, error)
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_SearchFromRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseridRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SearchFromRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Search/SearchFromRedis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SearchFromRedis(ctx, req.(*UseridRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchFromRedis",
			Handler:    _Search_SearchFromRedis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cr.proto",
}

func init() { proto.RegisterFile("cr.proto", fileDescriptor_cr_e35530168307cab2) }

var fileDescriptor_cr_e35530168307cab2 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x48, 0x2e, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2, 0xe7, 0xe2, 0x0d, 0x2d, 0x4e, 0x2d, 0xca, 0x4c, 0x09, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe3, 0xe2, 0x02, 0x09, 0x78, 0xa6, 0xf8, 0x64, 0x16,
	0x97, 0x48, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x06, 0x21, 0x89, 0x28, 0x19, 0x73, 0xf1, 0xbb, 0x15,
	0x65, 0xa6, 0xe6, 0x81, 0x79, 0x41, 0xa9, 0x05, 0x39, 0x95, 0x42, 0x0a, 0x5c, 0xdc, 0x10, 0xa1,
	0x62, 0xa8, 0x1e, 0x46, 0x0d, 0xce, 0x20, 0x64, 0x21, 0x23, 0x7b, 0x2e, 0xb6, 0xe0, 0xd4, 0xc4,
	0xa2, 0xe4, 0x0c, 0x21, 0x53, 0x2e, 0x7e, 0x08, 0xcb, 0xad, 0x28, 0x3f, 0x37, 0x28, 0x35, 0x25,
	0xb3, 0x58, 0x88, 0x4f, 0x0f, 0xc5, 0x05, 0x52, 0x02, 0x7a, 0x68, 0x16, 0x28, 0x31, 0x24, 0xb1,
	0x81, 0x5d, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x39, 0x8f, 0x98, 0x99, 0xb9, 0x00, 0x00,
	0x00,
}
